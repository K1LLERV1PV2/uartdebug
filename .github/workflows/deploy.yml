name: Deploy uartdebug
on:
  push:
    branches: ["main"]
  workflow_dispatch:
    inputs:
      rollback:
        description: "Откатиться на предыдущий релиз (без загрузки новых файлов)"
        required: false
        type: boolean
        default: false
      to_release:
        description: "Откат к релизу с меткой (например, 20240810-153000). Пусто — к предыдущему"
        required: false
        type: string

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      TG_BOT_TOKEN: ${{ secrets.TG_BOT_TOKEN || '' }}
      TG_CHAT_ID: ${{ secrets.TG_CHAT_ID || '' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Debug SSH connectivity (temporary)
        run: |
          set -euo pipefail
          KEY_FILE="$(mktemp)"
          printf '%s\n' "${{ secrets.SSH_PRIVATE_KEY }}" > "$KEY_FILE"
          chmod 600 "$KEY_FILE"
          ssh -o StrictHostKeyChecking=no -o ConnectTimeout=10 \
              -i "$KEY_FILE" -p "${{ secrets.SSH_PORT || 22 }}" \
              "${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}" 'whoami && hostname'

      - name: Upload public/ if exists and not rollback
        if: ${{ (hashFiles('public/**') != '') && (!inputs.rollback) }}
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT || 22 }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          source: "public"
          target: "/tmp/deploy/${{ github.sha }}/public"
          strip_components: 1
          rm: true

      - name: Upload backend/ if exists and not rollback
        if: ${{ (hashFiles('backend/**') != '') && (!inputs.rollback) }}
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT || 22 }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          source: "backend"
          target: "/tmp/deploy/${{ github.sha }}/backend"
          strip_components: 1
          rm: true

      - name: Run remote deploy / rollback (fixed bootstrap + versions + retention)
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT || 22 }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            set -euo pipefail

            # ===== Params =====
            SHA="${{ github.sha }}"
            REF_NAME="${{ github.ref_name }}"
            RUN_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"

            ROOT="/var/www/uartdebug"
            PUB_DIR="${ROOT}/public"
            BE_DIR="${ROOT}/backend"
            RLS="${ROOT}/releases"
            PUB_RLS="${RLS}/public"
            BE_RLS="${RLS}/backend"

            PM2_NAME="${{ secrets.PM2_NAME }}"
            [ -z "${PM2_NAME:-}" ] && PM2_NAME="uartdebug-backend"

            HC_URL="${{ secrets.HC_URL || '' }}"
            [ -z "${HC_URL:-}" ] && HC_URL="http://68.183.170.241/health"

            KEEP="${{ secrets.RELEASES_KEEP || '10' }}"   # сколько релизов хранить
            ROLLBACK="${{ inputs.rollback && '1' || '' }}"
            TO_RELEASE="${{ inputs.to_release || '' }}"

            # ===== Prepare dirs =====
            sudo mkdir -p "${PUB_RLS}" "${BE_RLS}"
            sudo chown -R "$USER":"$USER" "${ROOT}" "${RLS}" "${PUB_RLS}" "${BE_RLS}"

            # ===== Fixed bootstrap: если public/backend — каталоги, превращаем в симлинки на релизы =====
            ts_bootstrap="$(date +%Y%m%d-%H%M%S)-bootstrap"
            for X in public backend; do
              DIR="${ROOT}/${X}"
              RLS_DIR="${RLS}/${X}"
              [ -d "$RLS_DIR" ] || mkdir -p "$RLS_DIR"
              if [ ! -L "$DIR" ] && [ -d "$DIR" ]; then
                mkdir -p "${RLS_DIR}/${ts_bootstrap}"
                rsync -a --delete "${DIR}/" "${RLS_DIR}/${ts_bootstrap}/"
                rm -rf "${DIR}"                          # важный момент: убираем каталог
                ln -sfn "${RLS_DIR}/${ts_bootstrap}" "${DIR}"
              fi
            done

            # ===== Rollback or Deploy =====
            if [ -n "${ROLLBACK}" ]; then
              echo "== Rollback mode =="
              if [ -n "${TO_RELEASE}" ]; then
                # откат к конкретному релизу (если есть)
                [ -d "${PUB_RLS}/${TO_RELEASE}" ] && ln -sfn "${PUB_RLS}/${TO_RELEASE}" "${PUB_DIR}" || echo "No public release ${TO_RELEASE}"
                [ -d "${BE_RLS}/${TO_RELEASE}" ]  && ln -sfn "${BE_RLS}/${TO_RELEASE}"  "${BE_DIR}"  || echo "No backend release ${TO_RELEASE}"
              else
                # откат на предыдущий (не текущий)
                if [ -d "${PUB_RLS}" ]; then
                  last_pub="$(ls -1 "${PUB_RLS}" | sort | tail -n 2 | head -n 1 || true)"
                  [ -n "${last_pub}" ] && ln -sfn "${PUB_RLS}/${last_pub}" "${PUB_DIR}" || echo "No previous public release"
                fi
                if [ -d "${BE_RLS}" ]; then
                  last_be="$(ls -1 "${BE_RLS}" | sort | tail -n 2 | head -n 1 || true)"
                  [ -n "${last_be}" ] && ln -sfn "${BE_RLS}/${last_be}" "${BE_DIR}" || echo "No previous backend release"
                fi
              fi

            else
              echo "== Deploy new build =="
              PUB_SRC="/tmp/deploy/${SHA}/public"
              BE_SRC="/tmp/deploy/${SHA}/backend"
              NOW="$(date +%Y%m%d-%H%M%S)-${SHA:0:7}"
              PUB_NEW="${PUB_RLS}/${NOW}"
              BE_NEW="${BE_RLS}/${NOW}"

              # Копируем артефакты, пишем метаданные, переключаем симлинки
              if [ -d "$PUB_SRC" ]; then
                rm -rf "$PUB_NEW"; mkdir -p "$PUB_NEW"
                rsync -a --delete "$PUB_SRC"/ "$PUB_NEW"/
                printf 'sha=%s\nref=%s\nrun=%s\n' "$SHA" "$REF_NAME" "$RUN_URL" > "$PUB_NEW/RELEASE.txt"
                ln -sfn "$PUB_NEW" "$PUB_DIR"
              else
                echo "No frontend artifacts at $PUB_SRC (skip)"
              fi

              if [ -d "$BE_SRC" ]; then
                rm -rf "$BE_NEW"; mkdir -p "$BE_NEW"
                rsync -a --delete "$BE_SRC"/ "$BE_NEW"/
                printf 'sha=%s\nref=%s\nrun=%s\n' "$SHA" "$REF_NAME" "$RUN_URL" > "$BE_NEW/RELEASE.txt"
                ln -sfn "$BE_NEW" "$BE_DIR"
              else
                echo "No backend artifacts at $BE_SRC (skip)"
              fi
            fi

            # ===== Nginx reload (optional) =====
            if command -v nginx >/dev/null 2>&1; then
              sudo nginx -t && sudo systemctl reload nginx || true
            fi

            # ===== Backend deps & PM2 =====
            if [ -f "${BE_DIR}/package.json" ]; then
              cd "${BE_DIR}"
              npm ci --omit=dev || npm install --omit=dev
              if command -v pm2 >/dev/null 2>&1; then
                pm2 startOrReload ecosystem.config.js --only "${PM2_NAME}" || pm2 restart "${PM2_NAME}" || true
                pm2 save || true
              else
                echo "pm2 not found — skipping"
              fi
            fi

            # ===== Healthcheck =====
            if [ -n "${HC_URL}" ]; then
              echo "Healthcheck: ${HC_URL}"
              code="$(curl -sS -o /dev/null -w '%{http_code}' --max-time 10 "${HC_URL}" || echo 000)"
              echo "HTTP ${code}"
              [ "${code}" = "200" ] || { echo "Healthcheck failed"; exit 1; }
            fi

            # ===== Retention (keep last N) — skip on rollback =====
            if [ -z "${ROLLBACK}" ]; then
              for BASE in "${PUB_RLS}" "${BE_RLS}"; do
                [ -d "$BASE" ] || continue
                count="$(ls -1 "$BASE" | sort | wc -l | tr -d ' ')"
                if [ "$count" -gt "$KEEP" ]; then
                  del=$((count - KEEP))
                  echo "Pruning $del old releases in $BASE..."
                  ls -1 "$BASE" | sort | head -n "$del" | xargs -r -I{} rm -rf "$BASE/{}"
                fi
              done
            fi

            echo "Deploy OK"

      - name: Cleanup temp on server
        if: ${{ always() && !inputs.rollback }}
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT || 22 }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            rm -rf "/tmp/deploy/${{ github.sha }}" || true

      - name: Notify Telegram (success)
        if: ${{ success() && env.TG_BOT_TOKEN != '' && env.TG_CHAT_ID != '' }}
        run: |
          curl -sS -X POST "https://api.telegram.org/bot${TG_BOT_TOKEN}/sendMessage" \
            -d chat_id="${TG_CHAT_ID}" \
            -d parse_mode=HTML \
            -d text="<b>✅ Deploy success</b>%0Arepo: ${{ github.repository }}%0Asha: ${{ github.sha }}%0A<code>${{ github.ref_name }}</code>%0A<a href=\"https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}\">Open run</a>" \
            >/dev/null || true

      - name: Notify Telegram (failure)
        if: ${{ failure() && env.TG_BOT_TOKEN != '' && env.TG_CHAT_ID != '' }}
        run: |
          curl -sS -X POST "https://api.telegram.org/bot${TG_BOT_TOKEN}/sendMessage" \
            -d chat_id="${TG_CHAT_ID}" \
            -d parse_mode=HTML \
            -d text="<b>❌ Deploy failed</b>%0Arepo: ${{ github.repository }}%0Asha: ${{ github.sha }}%0A<code>${{ github.ref_name }}</code>%0A<a href=\"https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}\">Open run</a>" \
            >/dev/null || true
